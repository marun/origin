apiVersion: v1
kind: List
items:

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: oz-master
  spec:
    replicas: 1
    selector:
      deploymentconfig: oz-master
    template:
      metadata:
        labels:
          deploymentconfig: oz-master

      spec:
        volumes:
        - name: oz-config
          secret:
            secretName: oz-config
        # TODO Use PersistentVolumes to support arbitrary undershift
        - name: oz-etcd
          hostPath:
            # TODO Determine hostPath dynamically (generate yaml from template)
            path: "/home/maru/src/openshift/src/github.com/openshift/origin/_oz/overshift/openshift.local.etcd"

        containers:
        # Need to generate the image name from a template to be able to
        # optionally use local registry in case of deploying to something
        # other than an all-in-one cluster
        - name: oz-master
          image: "openshift/oz-master"
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /config
            name: oz-config
            readOnly: true
          - mountPath: /var/lib/origin/openshift.local.etcd
            name: oz-etcd

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: oz-node
  spec:
    replicas: 2
    selector:
      deploymentconfig: oz-node
    template:
      metadata:
        labels:
          deploymentconfig: oz-node

      spec:
        volumes:
        - name: oz-config
          secret:
            secretName: oz-config
        # TODO - figure out how best to run modprobe on hosts
        - name: lib-modules
          hostPath:
            path: "/lib/modules"

        containers:
        # Need to generate the image name from a template to be able to
        # optionally use local registry in case of deploying to something
        # other than an all-in-one cluster
        - name: oz-node
          image: "openshift/oz-node"
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /config
            name: oz-config
            readOnly: true
          - mountPath: /lib/modules
            name: lib-modules
          lifecycle:
            preStop:
              exec:
                command: ["/usr/local/bin/decommission-node.sh"]
